TSQL Homework 04 Chapter 4, T-SQL Query Fundamentals Readings Read Chapter 4 in the T-SQL Query Fundamentals book. Homework questions 

1. In your own words, what is a subquery? 
A query within a query.

2. In your own words, what is a self contained subquery? 
 A subquery which is independent of it’s outer query tables.

3. In your own words, what is a correlated subquery? 
subqueries that refer to attributes from the tables that appear in the outer query.

4. Give an example of a subquery that returns a single value. When would you use this kind of subquery? 
SELECT avg(orderid) FROM Sales.Orders;
Use when we need only one return value.

5. Give an example of a subquery that returns multiple values. When would you use this kind of subquery? 
SELECT shipcountry FROM Sales.Orders;

Use when we need multiple return values from one row or one column.

6. Give an example of a subquery that returns table values. When would you use this kind of subquery? 
SELECT * FROM student
    -> WHERE student_id IN (SELECT student_id FROM absence);
When we need a table result from a subquery to filter another query.

7. What does the exists predicate do? Give an example. 
EXISTS and NOT EXISTS test whether a subquery result is empty.
SELECT custid, companyname
FROM Sales.Customers AS C
WHERE country = N'Spain'  AND EXISTS    (SELECT * FROM Sales.Orders 
    AS O     WHERE O.custid = C.custid);

8. What happens if we use the not operator before a predicate? Give an example. 
You negate the predicate.
SELECT custid, companyname
FROM Sales.Customers AS C
WHERE country = N'Spain'  AND NOT EXISTS    (SELECT * FROM Sales.Orders 
            AS O     WHERE O.custid = C.custid);

9. When you use exists or not exists with respect to a row in a database, does it return two or three values? Explain your answer. 


10. How would you use a subquery to calculate aggregates? For example, you want to calculate yearly sales of a product, and you also want to keep a running sum of total sales. Explain how you would use a subquery to do this.
You query one instance of the view (call it O1) to return for each year the current year and quantity. You use a correlated subquery against a second instance of the view (call it O2) to calculate the running-total quantity. The subquery should filter all rows in O2 where the order year is smaller than or equal to the current year in O1, and sum the quantities from O2. Here’s the solution query: 
SELECT orderyear, qty,  (SELECT SUM(O2.qty)   
FROM Sales.OrderTotalsByYear AS O2   
WHERE O2.orderyear <= O1.orderyear) AS runqty
FROM Sales.OrderTotalsByYear 
AS O1ORDER BY orderyear;
